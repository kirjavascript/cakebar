XML / SVG (layout) config
conditional display / flexbox
dmenu replacement
realm
Inconsolata
crates: clap (options for monitors)
reload config
windows taskbar (clickable) + osx background rice
https://crates.io/crates/leechbar
https://github.com/jaagr/polybar
https://github.com/geommer/yabar
https://github.com/paholg/rustybar
lemonbar
<command interval="5000">
    uname -a
</command>
xdg

bindsym $mod+m exec rustybar-msg
yaml toml json xml nginx
css: https://github.com/antoyo/mg/blob/master/src/app/status_bar.rs#L82-L87

rs
config
render

fn bump() {

    let (conn, screen_num) = xcb::Connection::connect(None).unwrap();
    let setup = conn.get_setup();
    let screen = setup.roots().nth(screen_num as usize).unwrap();

    let window = conn.generate_id();

    let values = [
        (xcb::CW_BACK_PIXEL, screen.white_pixel()),
        (xcb::CW_EVENT_MASK, xcb::EVENT_MASK_EXPOSURE | xcb::EVENT_MASK_KEY_PRESS),
    ];

    xcb::create_window(&conn,
        xcb::COPY_FROM_PARENT as u8,
        window,
        screen.root(),
        0, 0,
        150, 40,
        10,
        xcb::WINDOW_CLASS_INPUT_OUTPUT as u16,
        screen.root_visual(),
        &values);
    let title = "Basic Window";
    //
    // Set all window properties
    let height = 40;
    let struts = [0, 0, height, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    set_prop!(&conn, window, "_NET_WM_STRUT", &struts[0..4]);
    set_prop!(&conn, window, "_NET_WM_STRUT_PARTIAL", &struts);
    set_prop!(&conn, window, "_NET_WM_WINDOW_TYPE", @atom "_NET_WM_WINDOW_TYPE_DOCK");
    set_prop!(&conn, window, "_NET_WM_STATE", @atom "_NET_WM_STATE_STICKY");
    set_prop!(&conn, window, "_NET_WM_DESKTOP", &[-1]);
    // set_prop!(&conn, window, "_NET_WM_NAME", &title[..3], "UTF8_STRING", 8);
// set_prop!(&conn, window, "WM_NAME", &title[..3], "STRING", 8);

    xcb::map_window(&conn, window);

    // setting title
    xcb::change_property(&conn, xcb::PROP_MODE_REPLACE as u8, window,
            xcb::ATOM_WM_NAME, xcb::ATOM_STRING, 8, title.as_bytes());

    conn.flush();

    loop { let event = conn.wait_for_event(); }
}
